
Kellen Haas
CPSC 2311
Lab4 
7/9/20


1. What is the address (in hexadecimal) of the first and last instruction in the loop?
	0x105c4
	0x105ec

2. Is the loop of the "while(condition)-do", "repeat-until(condition)", or "do-while(condition)" form?
	do-while(condition)


3. Do the values of 'x' increase or decrease?
	increase


4. In the form of "b *ADDRESS", what is the command to set a breakpoint on the line where you can observe the new value of 'y' after it is calcualted? Actually use "print $r0" to check and make sure the register you think is 'y' has been updated and has the correct value.
	b 33


5. What two gdb commands can you enter so that at each and every step, gdb will print both the decimal and hexadecimal form of the value 'y'?
	Hexidecimal: display /x $r3
	Decimal: display /d $r3


6. The loop as written only calculates the value of 'y' for the values of 'x' between 0 and 9. It should calculate the value of 'y' for all values of 'x' between 0 and 10. Why does the loop stop at 9 and what change would fix it?
	It does this because the branch statement is for less than and not less than or equal to. I would change line 41 to ble loop.


7. Correct the code in "loop.s", assemble and step through the program again in gdb. Fill in the following table:

register        register                register
   x               y                       y
(counter)       (decimal)               (hexadecimal)

   0                7            	         0x7

   1               -1            		  0xffffffff

   2               -9              	      0xfffffff7

   3              -17                     0xffffffef

   4              -25              	      0xffffffe7

   5              -33                     0xffffffdf

   6              -41                     0xffffffd7

   7              -49                     0xffffffcf

   8              -57              		  0xffffffc7

   9              -65                     0xffffffbf

  10              -73             		  0xffffffb7
  

=====================
 Octal Dump Questions
=====================

8. What type of data is in the source file?
	The program in Assembly Language or human-readable code. 


9. What type of data is in the executable?
	The program's ARM executable code in binary numbers.


BONUS:

10. Use the directory list command (ls -l) to determine the size of your source file (loop.s) and the executable (loop). How do the files compare in size? Which is bigger? In order to get any credit you must also explain why it is bigger.
	The executable file is larger 579844 bits while the source code file 		is only 1008 bits. The executable file is larger because it contains 		library connections and links to other object files as well. 


